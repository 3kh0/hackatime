<% content_for :head do %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<% end %>

<div class="container">
  <div class="content">
    <h1>Welcome, <%= @user.display_name %></h1>
  </div>
</div>

<%= turbo_frame_tag "filterable_dashboard", src: my_filterable_dashboard_path do %>
  <span>Loading...</span>
<% end %>

<style>
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

.content {
  max-width: 1200px;
  margin: 0 auto;
}

h1 {
  font-size: 2rem;
  font-weight: bold;
  margin-bottom: 1.5rem;
}

.filters-section {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  flex-wrap: wrap;
}

.filters {
  margin-bottom: 2rem;
  background: #f5f5f5;
  padding: 1rem;
  border-radius: 4px;
}

.filter-group {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
  align-items: flex-start;
}

.filter {
  flex: 1;
  min-width: 150px;
  position: relative;
}

.filter-label {
  display: block;
  font-size: 0.9rem;
  margin-bottom: 0.25rem;
  color: #666;
}

.custom-select {
  position: relative;
  width: 100%;
}

.select-header-container {
  display: flex;
  align-items: center;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: white;
}

.select-header {
  flex: 1;
  padding: 0.4rem 0.5rem;
  font-size: 0.8rem;
  cursor: pointer;
  user-select: none;
}

.clear-button {
  padding: 0.4rem 0.5rem;
  font-size: 1rem;
  line-height: 1;
  color: #666;
  background: none;
  border: none;
  border-left: 1px solid #ddd;
  cursor: pointer;
  display: none;
}

.clear-button:hover {
  color: #ff4444;
  background-color: rgba(0, 0, 0, 0.05);
}

.options-container {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-top: 4px;
  max-height: 200px;
  overflow-y: auto;
  z-index: 1000;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.custom-select.active .options-container {
  display: block;
}

.option {
  display: flex;
  align-items: center;
  padding: 0.35rem 0.5rem;
  cursor: pointer;
  transition: background-color 0.2s;
  font-size: 0.8rem;
}

.option:hover {
  background-color: #f5f5f5;
}

.option input[type="checkbox"] {
  margin-right: 0.5rem;
  transform: scale(0.9);
}

.time-filter {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem;
  background: white;
  border: 1px solid #ddd;
  border-radius: 4px;
  cursor: pointer;
  white-space: nowrap;
}

.calendar-icon {
  font-size: 1.1rem;
}

.dropdown-arrow {
  font-size: 0.8rem;
  color: #666;
}

#dashboard-content {
  min-height: 200px;
  width: 100%;
}

#dashboard-content.loading .dashboard-wrapper {
  filter: grayscale(1) opacity(0.7);
  pointer-events: none;
  transition: filter 0.2s ease;
}
</style>

<script>
// Global initialization functions for each multi-select type
window.initializeMultiSelect = window.initializeMultiSelect || function(selectId) {
  const select = document.getElementById(selectId);
  if (!select || select.dataset.initialized) return;
  
  select.dataset.initialized = 'true';
  const header = select.querySelector('.select-header');
  const container = select.querySelector('.options-container');
  const checkboxes = select.querySelectorAll('input[type="checkbox"]');
  const clearButton = select.querySelector('.clear-button');
  const searchInput = select.querySelector('.search-input');
  
  // Initialize clear button visibility
  const checkedBoxes = Array.from(checkboxes).filter(cb => cb.checked);
  if (checkedBoxes.length > 0 && clearButton) {
    clearButton.style.display = 'block';
    if (checkedBoxes.length === 1) {
      header.textContent = checkedBoxes[0].value;
    } else {
      header.textContent = `${checkedBoxes.length} selected`;
    }
  }
  
  // Toggle dropdown
  header.addEventListener('click', function(e) {
    e.stopPropagation();
    const isVisible = container.style.display === 'block';
    
    // Close all other dropdowns
    document.querySelectorAll('.options-container').forEach(c => {
      if (c !== container) c.style.display = 'none';
    });
    
    // Toggle current dropdown
    container.style.display = isVisible ? 'none' : 'block';
    
    // Focus search input when opening
    if (!isVisible && searchInput) {
      searchInput.focus();
    }
  });

  // Clear filter when clicking the clear button
  if (clearButton) {
    clearButton.addEventListener('click', function(e) {
      e.stopPropagation();
      checkboxes.forEach(cb => cb.checked = false);
      updateSelect(select);
    });
  }

  // Handle search input
  if (searchInput) {
    searchInput.addEventListener('input', function(e) {
      console.log('searchInput.addEventListener', e.target.value);
      const searchTerm = e.target.value.toLowerCase().trim();
      const options = select.querySelectorAll('.option');
      
      options.forEach(option => {
        const text = option.querySelector('span').textContent.toLowerCase().trim();
        option.style.display = text.includes(searchTerm) ? '' : 'none';
      });
    });

    // Prevent dropdown from closing when clicking search
    searchInput.addEventListener('click', function(e) {
      e.stopPropagation();
    });
  }

  // Update header text and URL when checkboxes change
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      updateSelect(select);
    });
  });
};

// Global function to update select and fetch new data
window.updateSelect = window.updateSelect || function(select) {
  const header = select.querySelector('.select-header');
  const clearButton = select.querySelector('.clear-button');
  const checkboxes = select.querySelectorAll('input[type="checkbox"]');
  const param = select.dataset.param;
  const frame = document.querySelector('#filterable_dashboard_content');

  frame.classList.add('loading');
  
  const selected = Array.from(checkboxes)
    .filter(cb => cb.checked)
    .map(cb => cb.value);
  
  // Update header text
  if (selected.length === 0) {
    header.textContent = `Filter by ${header.closest('.filter').querySelector('.filter-label').textContent.slice(2).toLowerCase()}...`;
    if (clearButton) clearButton.style.display = 'none';
  } else if (selected.length === 1) {
    header.textContent = selected[0];
    if (clearButton) clearButton.style.display = 'block';
  } else {
    header.textContent = `${selected.length} selected`;
    if (clearButton) clearButton.style.display = 'block';
  }

  // Update URL parameters without triggering navigation
  const rootUrl = new URL(window.location);
  if (selected.length > 0) {
    rootUrl.searchParams.set(param, selected.join(','));
  } else {
    rootUrl.searchParams.delete(param);
  }
  window.history.pushState({}, '', rootUrl);

  // update content-frame url
  const contentUrl = new URL(window.location);
  contentUrl.pathname = "<%= my_filterable_dashboard_content_path %>";
  contentUrl.searchParams.set(param, selected.join(','));

  // Let Turbo handle the content update
  frame.src = contentUrl.toString();
  fetch(contentUrl.toString(), {
    headers: {
      'Accept': 'text/html'
    }
  }).then(response => response.text()).then(html => {
    frame.innerHTML = html;
    frame.classList.remove('loading');
  });

};

// Initialize multi-selects when the frame loads
document.addEventListener('turbo:frame-load', function(event) {
  if (event.target.id === 'filterable_dashboard') {
    // Initialize each multi-select
    ['projects', 'language', 'editor', 'os'].forEach(type => {
      window.initializeMultiSelect(`${type}-select`);
    });

    // Close all dropdowns when clicking outside
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.custom-select')) {
        document.querySelectorAll('.options-container').forEach(container => {
          container.style.display = 'none';
        });
      }
    });
  }
});
</script> 