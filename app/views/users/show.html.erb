<%# Move Chart.js to head %>
<% content_for :head do %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<% end %>

<div class="container">
  <div class="content">
    <h1>Welcome, <%= @user.display_name %></h1>
    
    <div class="filters-section">
      <%= render partial: 'shared/multi_select', locals: {
        label: 'Project',
        param: 'projects',
        values: @projects,
        selected: params[:projects]
      } %>

      <%= render partial: 'shared/multi_select', locals: {
        label: 'Language',
        param: 'language',
        values: @languages,
        selected: params[:language]
      } %>

      <%= render partial: 'shared/multi_select', locals: {
        label: 'OS',
        param: 'os',
        values: @operating_systems,
        selected: params[:os]
      } %>

      <%= render partial: 'shared/multi_select', locals: {
        label: 'Editor',
        param: 'editor',
        values: @editors,
        selected: params[:editor]
      } %>
    </div>
  </div>
</div>

<%# Async dashboard content %>
<div id="dashboard-content">
  <%= render partial: 'filterable_dashboard' %>
</div>

<script>
function initializeDashboard() {
  const customSelects = document.querySelectorAll('.custom-select');
  const dashboardContent = document.getElementById('dashboard-content');
  
  // Disable Turbo drive for this section
  if (typeof Turbo !== 'undefined') {
    Turbo.session.drive = false;
  }

  // Remove any existing click handler before adding a new one
  if (window._dashboardClickHandler) {
    document.removeEventListener('click', window._dashboardClickHandler);
  }

  // Store the click handler reference so we can remove it later
  window._dashboardClickHandler = function(e) {
    if (!e.target.closest('.custom-select')) {
      customSelects.forEach(select => {
        const container = select.querySelector('.options-container');
        if (container) container.style.display = 'none';
      });
    }
  };

  // Add the click handler
  document.addEventListener('click', window._dashboardClickHandler);

  customSelects.forEach(select => {
    const header = select.querySelector('.select-header');
    const container = select.querySelector('.options-container');
    const checkboxes = select.querySelectorAll('input[type="checkbox"]');
    const clearButton = select.querySelector('.clear-button');
    const searchInput = select.querySelector('.search-input');
    
    // Initialize clear button visibility
    const checkedBoxes = Array.from(checkboxes).filter(cb => cb.checked);
    if (checkedBoxes.length > 0 && clearButton) {
      clearButton.style.display = 'block';
      if (checkedBoxes.length === 1) {
        header.textContent = checkedBoxes[0].value;
      } else {
        header.textContent = `${checkedBoxes.length} selected`;
      }
    }
    
    // Toggle dropdown
    header.addEventListener('click', function(e) {
      e.stopPropagation();
      const isVisible = container.style.display === 'block';
      
      // Close all other dropdowns
      customSelects.forEach(s => {
        if (s !== select) {
          const c = s.querySelector('.options-container');
          if (c) c.style.display = 'none';
        }
      });
      
      // Toggle current dropdown
      container.style.display = isVisible ? 'none' : 'block';
      
      // Focus search input when opening
      if (!isVisible && searchInput) {
        searchInput.focus();
      }
    });

    // Clear filter when clicking the clear button
    if (clearButton) {
      clearButton.addEventListener('click', function(e) {
        e.stopPropagation();
        checkboxes.forEach(cb => cb.checked = false);
        updateSelect(select);
      });
    }

    // Handle search input
    if (searchInput) {
      searchInput.addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const options = select.querySelectorAll('.option');
        
        options.forEach(option => {
          const text = option.textContent.toLowerCase();
          option.style.display = text.includes(searchTerm) ? '' : 'none';
        });
      });

      // Prevent dropdown from closing when clicking search
      searchInput.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    }

    // Update header text and URL when checkboxes change
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        updateSelect(select);
      });
    });
  });
}

// Clean up before Turbo navigation
document.addEventListener('turbo:before-render', function() {
  if (window._dashboardClickHandler) {
    document.removeEventListener('click', window._dashboardClickHandler);
  }
});
</script> 
