<%= turbo_frame_tag "filterable_dashboard" do %>
  <div class="container">
    <div class="content">
      <div class="filters-section">
        <%= render partial: 'shared/multi_select', locals: {
          label: 'Project',
          param: 'projects',
          values: @project,
          selected: params[:project]
        } %>

        <%= render partial: 'shared/multi_select', locals: {
          label: 'Language',
          param: 'language',
          values: @language,
          selected: params[:language]
        } %>

        <%= render partial: 'shared/multi_select', locals: {
          label: 'OS',
          param: 'operating_system',
          values: @operating_system,
          selected: params[:operating_system]
        } %>

        <%= render partial: 'shared/multi_select', locals: {
          label: 'Editor',
          param: 'editor',
          values: @editor,
          selected: params[:editor]
        } %>
      </div>
    </div>
  </div>

  <div id="filterable_dashboard_content">
    <%= render partial: 'filterable_dashboard_content' %> 
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js" data-turbo-track="reload"></script>
  <script>
    window.chartInstances = window.chartInstances || {};

    if (!window.hackatimeCharts) {
      window.hackatimeCharts = {
        formatDuration(seconds) {
          const hours = Math.floor(seconds / 3600);
          const minutes = Math.floor((seconds % 3600) / 60);
          
          if (hours > 0) {
            return `${hours}h ${minutes}m`;
          } else {
            return `${minutes}m`;
          }
        },

        createPieChart(elementId) {
          const canvas = document.getElementById(elementId);
          if (!canvas) return;

          const stats = JSON.parse(canvas.dataset.stats);
          const labels = Object.keys(stats);
          const data = Object.values(stats);

          if (window.chartInstances[elementId]) {
            window.chartInstances[elementId].destroy();
          }

          const ctx = canvas.getContext('2d');
          window.chartInstances[elementId] = new Chart(ctx, {
            type: 'pie',
            data: {
              labels: labels,
              datasets: [{
                data: data,
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: true,
              aspectRatio: 1.2,
              plugins: {
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const label = context.label || '';
                      const value = context.raw || 0;
                      const duration = window.hackatimeCharts.formatDuration(value);
                      const percentage = ((value / data.reduce((a, b) => a + b, 0)) * 100).toFixed(1);
                      return `${label}: ${duration} (${percentage}%)`;
                    }
                  }
                },
                legend: {
                  position: 'right',
                  align: 'center',
                  labels: {
                    boxWidth: 10,
                    padding: 8,
                    font: {
                      size: 10
                    }
                  }
                }
              }
            }
          });
        },

        createProjectTimelineChart() {
          const canvas = document.getElementById('projectTimelineChart');
          if (!canvas) return;

          const weeklyStats = JSON.parse(canvas.dataset.stats);
          
          const allProjects = new Set();
          Object.values(weeklyStats).forEach(weekData => {
            Object.keys(weekData).forEach(project => allProjects.add(project));
          });

          const sortedWeeks = Object.keys(weeklyStats).sort();

          const datasets = Array.from(allProjects).map((project, index) => {
            return {
              label: project,
              data: sortedWeeks.map(week => {
                const value = weeklyStats[week][project] || 0;
                return value;
              }),
              stack: 'stack0',
            };
          });

          datasets.sort((a, b) => {
            const sumA = a.data.reduce((acc, val) => acc + val, 0);
            const sumB = b.data.reduce((acc, val) => acc + val, 0);
            return sumB - sumA; // Sort in descending order
          });

          if (window.chartInstances['projectTimelineChart']) {
            window.chartInstances['projectTimelineChart'].destroy();
          }

          const ctx = canvas.getContext('2d');
          window.chartInstances['projectTimelineChart'] = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: sortedWeeks.map(week => {
                const date = new Date(week);
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
              }),
              datasets: datasets
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                x: {
                  stacked: true,
                  grid: {
                    display: false
                  }
                },
                y: {
                  stacked: true,
                  type: 'linear',
                  grid: {
                    color: (context) => {
                      if (context.tick.value === 0) return 'transparent';
                      return context.tick.value % 1 === 0 ? 'rgba(0, 0, 0, 0.1)' : 'rgba(0, 0, 0, 0.05)';
                    }
                  },
                  ticks: {
                    callback: function(value) {
                      if (value === 0) return '0s';
                      const hours = Math.floor(value / 3600);
                      const minutes = Math.floor((value % 3600) / 60);
                      if (hours > 0) {
                        return `${hours}h`;
                      }
                      return `${minutes}m`;
                    }
                  }
                }
              },
              plugins: {
                legend: {
                  position: 'right',
                  labels: {
                    boxWidth: 12,
                    padding: 15
                  }
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const value = context.raw;
                      const hours = Math.floor(value / 3600);
                      const minutes = Math.floor((value % 3600) / 60);
                      if (hours > 0) {
                        return `${context.dataset.label}: ${hours}h ${minutes}m`;
                      }
                      return `${context.dataset.label}: ${minutes}m`;
                    }
                  }
                }
              }
            }
          });
        },

        initializeCharts() {
          this.createPieChart('languageChart');
          this.createPieChart('editorChart');
          this.createPieChart('operatingSystemChart');
          this.createProjectTimelineChart();
        }
      };
    }

    if (!window.chartListenersInitialized) {
      window.chartListenersInitialized = true;
      
      document.addEventListener('turbo:frame-load', () => {
        if (typeof Chart === 'undefined') {
          const checkChart = setInterval(() => {
            if (typeof Chart !== 'undefined') {
              clearInterval(checkChart);
              window.hackatimeCharts.initializeCharts();
            }
          }, 50);
          setTimeout(() => clearInterval(checkChart), 5000);
        } else {
          window.hackatimeCharts.initializeCharts();
        }
      });
    }

    if (typeof Chart !== 'undefined') {
      window.hackatimeCharts.initializeCharts();
    }
  </script>
<% end %>