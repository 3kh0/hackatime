<%# This partial will be loaded asynchronously when filters change %>

<div class="dashboard-wrapper">
  <%# Stats cards %>
  <div class="stats-section">
    <div class="stat-card">
      <div class="stat-label">TOTAL TIME</div>
      <div class="stat-value" data-stat="total_time"><%= ApplicationController.helpers.short_time_simple(@total_time) %></div>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">TOTAL HEARTBEATS</div>
      <div class="stat-value" data-stat="total_heartbeats"><%= number_with_delimiter(@total_heartbeats) %></div>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">TOP PROJECT</div>
      <div class="stat-value" data-stat="top_project"><%= @top_project || "None" %></div>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">TOP LANGUAGE</div>
      <div class="stat-value" data-stat="top_language"><%= @top_language || "Unknown" %></div>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">TOP OS</div>
      <div class="stat-value" data-stat="top_os"><%= @top_os || "Unknown" %></div>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">TOP EDITOR</div>
      <div class="stat-value" data-stat="top_editor"><%= @top_editor || "Unknown" %></div>
    </div>
  </div>

  <div class="dashboard-grid">
    <%# Project duration graph - spans full height %>
    <div class="card">
      <h2>Project Durations</h2>
      <div class="bar-graph">
        <% 
          max_duration = @project_durations.values.max
          min_duration = @project_durations.values.min

          # Use logarithmic scale for better visibility of smaller values
          # Add 1 to avoid log(0), scale to 15-100 range
          def log_scale(value, max_val)
            return 0 if value == 0
            min_percent = 5  # Minimum bar width percentage
            max_percent = 100 # Maximum bar width percentage
            
            # Mix linear and logarithmic scaling
            # 80% linear, 20% logarithmic
            linear_ratio = value.to_f / max_val
            log_ratio = Math.log(value + 1) / Math.log(max_val + 1)
            
            linear_weight = 0.8
            log_weight = 0.2
            
            scaled = min_percent + (linear_weight * linear_ratio + log_weight * log_ratio) * (max_percent - min_percent)
            [scaled, max_percent].min.round
          end
        %>
        
        <% @project_durations.each do |project, duration| %>
          <div class="bar-row">
            <div class="bar-label"><%= project %></div>
            <div class="bar-container">
              <div class="bar" style="width: <%= log_scale(duration, max_duration) %>%">
                <span class="bar-value"><%= ApplicationController.helpers.short_time_simple(duration) %></span>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <%# Language distribution %>
    <div class="card">
      <h2>Languages</h2>
      <div class="chart-container">
        <canvas id="languageChart" data-stats="<%= @language_stats.to_json %>"></canvas>
      </div>
    </div>

    <%# Editor distribution %>
    <div class="card">
      <h2>Editors</h2>
      <div class="chart-container">
        <canvas id="editorChart" data-stats="<%= @editor_stats.to_json %>"></canvas>
      </div>
    </div>

    <%# OS distribution %>
    <div class="card">
      <h2>Operating Systems</h2>
      <div class="chart-container">
        <canvas id="osChart" data-stats="<%= @os_stats.to_json %>"></canvas>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js" data-turbo-track="reload"></script>
<script>
// Initialize global chart instances if not already done
window.chartInstances = window.chartInstances || {};

// Only define functions if they haven't been defined yet
if (!window.hackatimeCharts) {
  window.hackatimeCharts = {
    // Helper function to format duration
    formatDuration(seconds) {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      
      if (hours > 0) {
        return `${hours}h ${minutes}m`;
      } else {
        return `${minutes}m`;
      }
    },

    // Helper function to create pie charts
    createPieChart(elementId) {
      const canvas = document.getElementById(elementId);
      if (!canvas) return;

      // Get stats from data attribute
      const stats = JSON.parse(canvas.dataset.stats);
      const labels = Object.keys(stats);
      const data = Object.values(stats);

      // Destroy existing chart if it exists
      if (window.chartInstances[elementId]) {
        window.chartInstances[elementId].destroy();
      }

      const ctx = canvas.getContext('2d');
      window.chartInstances[elementId] = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          layout: {
            padding: {
              right: 20
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  const duration = window.hackatimeCharts.formatDuration(value);
                  const percentage = ((value / data.reduce((a, b) => a + b, 0)) * 100).toFixed(1);
                  return `${label}: ${duration} (${percentage}%)`;
                }
              }
            },
            legend: {
              position: 'right',
              align: 'center',
              labels: {
                boxWidth: 10,
                padding: 8,
                font: {
                  size: 10
                }
              }
            }
          }
        }
      });
    },

    // Initialize or reinitialize charts
    initializeCharts() {
      this.createPieChart('languageChart');
      this.createPieChart('editorChart');
      this.createPieChart('osChart');
    }
  };
}

// Function to set up event listeners (only needs to run once)
if (!window.chartListenersInitialized) {
  window.chartListenersInitialized = true;
  
  document.addEventListener('turbo:render', () => {
    // Wait for Chart.js to load
    if (typeof Chart === 'undefined') {
      const checkChart = setInterval(() => {
        if (typeof Chart !== 'undefined') {
          clearInterval(checkChart);
          window.hackatimeCharts.initializeCharts();
        }
      }, 50);
      // Set a timeout to stop checking after 5 seconds
      setTimeout(() => clearInterval(checkChart), 5000);
    } else {
      window.hackatimeCharts.initializeCharts();
    }
  });
}

// Initialize charts immediately if Chart.js is already loaded
if (typeof Chart !== 'undefined') {
  window.hackatimeCharts.initializeCharts();
}
</script> 